0
['PUSH1 0x60 ', 'PUSH1 0x40 ', 'MSTORE ', 'PUSH1 0x04 ', 'CALLDATASIZE ', 'LT ', 'PUSH1 0x49 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x60 
[96]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 96]
Stack despues de la ejecucion de la instruccion MSTORE 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x04 
[4]
Stack despues de la ejecucion de la instruccion CALLDATASIZE 
[Id_size, 4]
Stack despues de la ejecucion de la instruccion LT 
[If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion PUSH1 0x49 
[73, If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion JUMPI 
[]
73
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH1 0x53 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0)]
Stack despues de la ejecucion de la instruccion PUSH1 0x53 
[83, If(Iv == 0, 1, 0)]
Stack despues de la ejecucion de la instruccion JUMPI 
[]
83
['JUMPDEST ', 'PUSH1 0x59 ', 'PUSH1 0x8d ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x59 
[89]
Stack despues de la ejecucion de la instruccion PUSH1 0x8d 
[141, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[89]
141
['JUMPDEST ', 'PUSH1 0x05 ', 'PUSH1 0x01 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'PUSH1 0x9d ', 'PUSH1 0x03 ', 'PUSH1 0x9f ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[89]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 5, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[5, 1, 5, 89]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 5, 5, 89]
Stack despues de la ejecucion de la instruccion SSTORE 
[5, 89]
Stack despues de la ejecucion de la instruccion POP 
[89]
Stack despues de la ejecucion de la instruccion PUSH1 0x9d 
[157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x03 
[3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x9f 
[159, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[3, 157, 89]
159
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'SWAP1 ', 'POP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[0, 3, 157, 89]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 3, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLT 
[1, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 3, 157, 89]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[5, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 5, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma, 5, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[5 + Ia_store-0-suma, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 5 + Ia_store-0-suma, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[5 + Ia_store-0-suma, 0, 5 + Ia_store-0-suma, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 5 + Ia_store-0-suma, 5 + Ia_store-0-suma, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SSTORE 
[5 + Ia_store-0-suma, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 0, 0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[1L, 0, 0, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP2 
[0, 0, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[0, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[1L, 3, 157, 89]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[1L, 3, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLT 
[1, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 0, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMPI 
[1L, 3, 157, 89]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[5, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 5, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[5 + Ia_store-0-suma, 5, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[10 + Ia_store-0-suma, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 10 + Ia_store-0-suma, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[10 + Ia_store-0-suma, 0, 10 + Ia_store-0-suma, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 10 + Ia_store-0-suma, 10 + Ia_store-0-suma, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SSTORE 
[10 + Ia_store-0-suma, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 1L, 1L, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[2L, 1L, 1L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP2 
[1L, 1L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[1L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[2L, 3, 157, 89]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[2L, 3, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLT 
[1, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 0, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMPI 
[2L, 3, 157, 89]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[5, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 5, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLOAD 
[10 + Ia_store-0-suma, 5, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[15 + Ia_store-0-suma, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 15 + Ia_store-0-suma, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[15 + Ia_store-0-suma, 0, 15 + Ia_store-0-suma, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 15 + Ia_store-0-suma, 15 + Ia_store-0-suma, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SSTORE 
[15 + Ia_store-0-suma, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 2L, 2L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ADD 
[3L, 2L, 2L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SWAP2 
[2L, 2L, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[2L, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[3L, 3, 157, 89]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion DUP2 
[3L, 3, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion SLT 
[0, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion ISZERO 
[1, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 1, 3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion JUMPI 
[3L, 3, 157, 89]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, 3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[3, 157, 89]
Stack despues de la ejecucion de la instruccion POP 
[157, 89]
Stack despues de la ejecucion de la instruccion JUMP 
[89]
157
['JUMPDEST ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[89]
Stack despues de la ejecucion de la instruccion JUMP 
[]
89
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[]
Stack despues de la ejecucion de la instruccion STOP 
[]
79
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0]
Stack despues de la ejecucion de la instruccion REVERT 
[]
12
['PUSH1 0x00 ', 'CALLDATALOAD ', 'PUSH29 0x0100000000000000000000000000000000000000000000000000000000 ', 'SWAP1 ', 'DIV ', 'PUSH4 0xffffffff ', 'AND ', 'DUP1 ', 'PUSH4 0x49fba542 ', 'EQ ', 'PUSH1 0x5b ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[Id_1]
Stack despues de la ejecucion de la instruccion PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
[26959946667150639794667015087019630673637144422540572481103610249216L, Id_1]
Stack despues de la ejecucion de la instruccion SWAP1 
[Id_1, 26959946667150639794667015087019630673637144422540572481103610249216L]
Stack despues de la ejecucion de la instruccion DIV 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0xffffffff 
[4294967295, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0x49fba542 
[1241228610, Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EQ 
[If(Extract(255, 224, Id_1) == 1241228610, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x5b 
[91, If(Extract(255, 224, Id_1) == 1241228610, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
91
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH1 0x65 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x65 
[101, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
101
['JUMPDEST ', 'PUSH1 0x79 ', 'PUSH1 0x04 ', 'DUP1 ', 'DUP1 ', 'CALLDATALOAD ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'SWAP2 ', 'SWAP1 ', 'POP ', 'POP ', 'PUSH1 0x9f ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x79 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x04 
[4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4, 4, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[a, 4, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[4, a, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 4, a, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[36L, a, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[a, 36L, 4, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[4, 36L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[36L, 4, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x9f 
[159, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
159
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'SWAP1 ', 'POP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, a, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 0, 0, 1), 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 0, 1, 0), 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 0, 1, 0), 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma, Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + Ia_store-1-numero, 0, Ia_store-0-suma + Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + Ia_store-1-numero, Ia_store-0-suma + Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + Ia_store-1-numero, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 0, 0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[1L, 0, 0, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[0, 0, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1L, a, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 1, 0, 1), 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 1, 1, 0), 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 1, 1, 0), 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + Ia_store-1-numero, Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 2*Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 2*Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 2*Ia_store-1-numero, 0, Ia_store-0-suma + 2*Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 2*Ia_store-1-numero, Ia_store-0-suma + 2*Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 2*Ia_store-1-numero, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 1L, 1L, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[2L, 1L, 1L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[1L, 1L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[2L, a, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 2, 0, 1), 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 2, 1, 0), 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 2, 1, 0), 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + 2*Ia_store-1-numero, Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 3*Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 3*Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 3*Ia_store-1-numero, 0, Ia_store-0-suma + 3*Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 3*Ia_store-1-numero, Ia_store-0-suma + 3*Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 3*Ia_store-1-numero, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 2L, 2L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[3L, 2L, 2L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[2L, 2L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3L, a, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 3, 0, 1), 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 3, 1, 0), 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 3, 1, 0), 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + 3*Ia_store-1-numero, Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 4*Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 4*Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 4*Ia_store-1-numero, 0, Ia_store-0-suma + 4*Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 4*Ia_store-1-numero, Ia_store-0-suma + 4*Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 4*Ia_store-1-numero, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[3L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[3L, 3L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 3L, 3L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[4L, 3L, 3L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[3L, 3L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[4L, a, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 4, 0, 1), 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 4, 1, 0), 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 4, 1, 0), 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + 4*Ia_store-1-numero, Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 5*Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 5*Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 5*Ia_store-1-numero, 0, Ia_store-0-suma + 5*Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 5*Ia_store-1-numero, Ia_store-0-suma + 5*Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 5*Ia_store-1-numero, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4L, 4L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 4L, 4L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[5L, 4L, 4L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[4L, 4L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[5L, a, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 5, 0, 1), 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 5, 1, 0), 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 5, 1, 0), 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + 5*Ia_store-1-numero, Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 6*Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 6*Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 6*Ia_store-1-numero, 0, Ia_store-0-suma + 6*Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 6*Ia_store-1-numero, Ia_store-0-suma + 6*Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 6*Ia_store-1-numero, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[5L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[5L, 5L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 5L, 5L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[6L, 5L, 5L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[5L, 5L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[5L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[6L, a, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 6, 0, 1), 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 6, 1, 0), 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 6, 1, 0), 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
173
['PUSH1 0x01 ', 'SLOAD ', 'PUSH1 0x00 ', 'SLOAD ', 'ADD ', 'PUSH1 0x00 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xa5 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLOAD 
[Ia_store-0-suma + 6*Ia_store-1-numero, Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[Ia_store-0-suma + 7*Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Ia_store-0-suma + 7*Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Ia_store-0-suma + 7*Ia_store-1-numero, 0, Ia_store-0-suma + 7*Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, Ia_store-0-suma + 7*Ia_store-1-numero, Ia_store-0-suma + 7*Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[Ia_store-0-suma + 7*Ia_store-1-numero, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[6L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[6L, 6L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 6L, 6L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[7L, 6L, 6L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[6L, 6L, 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[6L, 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xa5 
[165, 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[a, 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[7L, a, 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[If(a <= 7, 0, 1), 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(a <= 7, 1, 0), 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, If(a <= 7, 1, 0), 7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
197
['JUMPDEST ', 'POP ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[7L, a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[a, 121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[121, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[Concat(0, Extract(255, 224, Id_1))]
121
['JUMPDEST ', 'STOP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion STOP 
[Concat(0, Extract(255, 224, Id_1))]
97
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
63
['DUP1 ', 'PUSH4 0xe97dcb62 ', 'EQ ', 'PUSH1 0x7b ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP1 
[Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0xe97dcb62 
[3917335394, Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EQ 
[If(Extract(255, 224, Id_1) == 3917335394, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x7b 
[123, If(Extract(255, 224, Id_1) == 3917335394, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
123
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH1 0x85 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x85 
[133, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
133
['JUMPDEST ', 'PUSH1 0x8b ', 'PUSH1 0x8d ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x8b 
[139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x8d 
[141, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[139, Concat(0, Extract(255, 224, Id_1))]
141
['JUMPDEST ', 'PUSH1 0x05 ', 'PUSH1 0x01 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'PUSH1 0x9d ', 'PUSH1 0x03 ', 'PUSH1 0x9f ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 5, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[5, 1, 5, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 5, 5, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[5, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x9d 
[157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x03 
[3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x9f 
[159, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
159
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'SWAP1 ', 'POP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 3, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[1, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 0, 0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 3, 157, 139, Concat(0, Extract(255, 224, Id_1))]
129
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
73
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH1 0x53 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x53 
[83, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
83
['JUMPDEST ', 'PUSH1 0x59 ', 'PUSH1 0x8d ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x59 
[89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x8d 
[141, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[89, Concat(0, Extract(255, 224, Id_1))]
141
['JUMPDEST ', 'PUSH1 0x05 ', 'PUSH1 0x01 ', 'DUP2 ', 'SWAP1 ', 'SSTORE ', 'POP ', 'PUSH1 0x9d ', 'PUSH1 0x03 ', 'PUSH1 0x9f ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 5, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[5, 1, 5, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 5, 5, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SSTORE 
[5, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x9d 
[157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x03 
[3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x9f 
[159, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
159
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'SWAP1 ', 'POP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
165
['JUMPDEST ', 'DUP2 ', 'DUP2 ', 'SLT ', 'ISZERO ', 'PUSH1 0xc5 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 3, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SLT 
[1, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xc5 
[197, 0, 0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 3, 157, 89, Concat(0, Extract(255, 224, Id_1))]
79
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
================
start address: 0
end address: 11
end statement type: conditional
jump target: 73
falls to: 12
PUSH1 0x60 
PUSH1 0x40 
MSTORE 
PUSH1 0x04 
CALLDATASIZE 
LT 
PUSH1 0x49 
JUMPI 
================
start address: 12
end address: 62
end statement type: conditional
jump target: 91
falls to: 63
PUSH1 0x00 
CALLDATALOAD 
PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
SWAP1 
DIV 
PUSH4 0xffffffff 
AND 
DUP1 
PUSH4 0x49fba542 
EQ 
PUSH1 0x5b 
JUMPI 
================
start address: 63
end address: 72
end statement type: conditional
jump target: 123
falls to: 73
DUP1 
PUSH4 0xe97dcb62 
EQ 
PUSH1 0x7b 
JUMPI 
================
start address: 73
end address: 78
end statement type: conditional
jump target: 83
falls to: 79
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH1 0x53 
JUMPI 
================
start address: 79
end address: 82
end statement type: terminal
jump target: 
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 83
end address: 88
end statement type: unconditional
jump target: 141
JUMPDEST 
PUSH1 0x59 
PUSH1 0x8d 
JUMP 
================
start address: 89
end address: 90
end statement type: terminal
jump target: 
JUMPDEST 
STOP 
================
start address: 91
end address: 96
end statement type: conditional
jump target: 101
falls to: 97
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH1 0x65 
JUMPI 
================
start address: 97
end address: 100
end statement type: terminal
jump target: 
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 101
end address: 120
end statement type: unconditional
jump target: 159
JUMPDEST 
PUSH1 0x79 
PUSH1 0x04 
DUP1 
DUP1 
CALLDATALOAD 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
SWAP2 
SWAP1 
POP 
POP 
PUSH1 0x9f 
JUMP 
================
start address: 121
end address: 122
end statement type: terminal
jump target: 
JUMPDEST 
STOP 
================
start address: 123
end address: 128
end statement type: conditional
jump target: 133
falls to: 129
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH1 0x85 
JUMPI 
================
start address: 129
end address: 132
end statement type: terminal
jump target: 
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 133
end address: 138
end statement type: unconditional
jump target: 141
JUMPDEST 
PUSH1 0x8b 
PUSH1 0x8d 
JUMP 
================
start address: 139
end address: 140
end statement type: terminal
jump target: 
JUMPDEST 
STOP 
================
start address: 141
end address: 156
end statement type: unconditional
jump target: 159
JUMPDEST 
PUSH1 0x05 
PUSH1 0x01 
DUP2 
SWAP1 
SSTORE 
POP 
PUSH1 0x9d 
PUSH1 0x03 
PUSH1 0x9f 
JUMP 
================
start address: 157
end address: 158
end statement type: unconditional
jump target: 89
JUMPDEST 
JUMP 
================
start address: 159
end address: 164
end statement type: falls_to
jump target: 
falls to: 165
JUMPDEST 
PUSH1 0x00 
DUP1 
SWAP1 
POP 
================
start address: 165
end address: 172
end statement type: conditional
jump target: 197
falls to: 173
JUMPDEST 
DUP2 
DUP2 
SLT 
ISZERO 
PUSH1 0xc5 
JUMPI 
================
start address: 173
end address: 196
end statement type: unconditional
jump target: 165
PUSH1 0x01 
SLOAD 
PUSH1 0x00 
SLOAD 
ADD 
PUSH1 0x00 
DUP2 
SWAP1 
SSTORE 
POP 
DUP1 
DUP1 
PUSH1 0x01 
ADD 
SWAP2 
POP 
POP 
PUSH1 0xa5 
JUMP 
================
start address: 197
end address: 200
end statement type: unconditional
jump target: 157 121
JUMPDEST 
POP 
POP 
JUMP 
================
start address: 201
end address: 201
end statement type: terminal
jump target: 
STOP 
{0: [0, 0, 2], 129: [1, 1, 3], 133: [1, 2, 3], 139: [0, 0, 0], 12: [0, 1, 3], 141: [2, 4, 5], 157: [1, 0, 1], 159: [4, 5, 6], 165: [5, 5, 7], 173: [5, 4, 7], 73: [1, 1, 3], 63: [1, 1, 3], 197: [4, 1, 4], 201: [0, 0, 0], 79: [1, 1, 3], 83: [1, 2, 3], 89: [0, 0, 0], 91: [1, 1, 3], 97: [1, 1, 3], 101: [1, 3, 6], 121: [1, 1, 1], 123: [1, 1, 3]}
