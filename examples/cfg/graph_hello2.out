0
['PUSH1 0x60 ', 'PUSH1 0x40 ', 'MSTORE ', 'PUSH1 0x04 ', 'CALLDATASIZE ', 'LT ', 'PUSH2 0x004c ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x60 
[96]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 96]
Stack despues de la ejecucion de la instruccion MSTORE 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x04 
[4]
Stack despues de la ejecucion de la instruccion CALLDATASIZE 
[Id_size, 4]
Stack despues de la ejecucion de la instruccion LT 
[If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion PUSH2 0x004c 
[76, If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion JUMPI 
[]
76
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0]
Stack despues de la ejecucion de la instruccion REVERT 
[]
13
['PUSH1 0x00 ', 'CALLDATALOAD ', 'PUSH29 0x0100000000000000000000000000000000000000000000000000000000 ', 'SWAP1 ', 'DIV ', 'PUSH4 0xffffffff ', 'AND ', 'DUP1 ', 'PUSH4 0x394a2493 ', 'EQ ', 'PUSH2 0x0051 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[Id_1]
Stack despues de la ejecucion de la instruccion PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
[26959946667150639794667015087019630673637144422540572481103610249216L, Id_1]
Stack despues de la ejecucion de la instruccion SWAP1 
[Id_1, 26959946667150639794667015087019630673637144422540572481103610249216L]
Stack despues de la ejecucion de la instruccion DIV 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0xffffffff 
[4294967295, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0x394a2493 
[961160339, Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EQ 
[If(Extract(255, 224, Id_1) == 961160339, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0051 
[81, If(Extract(255, 224, Id_1) == 961160339, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
81
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH2 0x005c ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x005c 
[92, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
92
['JUMPDEST ', 'PUSH2 0x0064 ', 'PUSH2 0x016d ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0064 
[100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x016d 
[365, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[100, Concat(0, Extract(255, 224, Id_1))]
365
['JUMPDEST ', 'PUSH2 0x0175 ', 'PUSH2 0x01f3 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0175 
[373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x01f3 
[499, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[373, 100, Concat(0, Extract(255, 224, Id_1))]
499
['JUMPDEST ', 'PUSH1 0x20 ', 'PUSH1 0x40 ', 'MLOAD ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'PUSH1 0x40 ', 'MSTORE ', 'DUP1 ', 'PUSH1 0x00 ', 'DUP2 ', 'MSTORE ', 'POP ', 'SWAP1 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 32, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[96, 32, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[32, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 32, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 128L, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[96, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 96, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 0, 96, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, 96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[96, 373, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[373, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[96, 100, Concat(0, Extract(255, 224, Id_1))]
373
['JUMPDEST ', 'PUSH1 0x40 ', 'DUP1 ', 'MLOAD ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'PUSH1 0x40 ', 'MSTORE ', 'DUP1 ', 'PUSH1 0x01 ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'PUSH32 0x6200000000000000000000000000000000000000000000000000000000000000 ', 'DUP2 ', 'MSTORE ', 'POP ', 'SWAP1 ', 'POP ', 'SWAP1 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[64, 64, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[128L, 64, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[64, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 64, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[192L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 192L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[128L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 128L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 1, 128L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[128L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 128L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH32 0x6200000000000000000000000000000000000000000000000000000000000000 
[44326659161160106060585767698638339725079916004815528421354856378029244940288L, 160L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[160L, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 160L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[160L, 128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 96, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 128L, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 100, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[100, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[128L, Concat(0, Extract(255, 224, Id_1))]
100
['JUMPDEST ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x20 ', 'ADD ', 'DUP3 ', 'DUP2 ', 'SUB ', 'DUP3 ', 'MSTORE ', 'DUP4 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'MLOAD ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'DUP1 ', 'DUP4 ', 'DUP4 ', 'PUSH1 0x00 ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 192L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[192L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 192L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[32L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[192L, 32L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[1, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 1, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[256L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[224L, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[128L, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[1, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[128L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 128L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
137
['JUMPDEST ', 'DUP4 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH2 0x00a4 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00a4 
[164, 0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
146
['DUP1 ', 'DUP3 ', 'ADD ', 'MLOAD ', 'DUP2 ', 'DUP5 ', 'ADD ', 'MSTORE ', 'PUSH1 0x20 ', 'DUP2 ', 'ADD ', 'SWAP1 ', 'POP ', 'PUSH2 0x0089 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[160L, 0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[44326659161160106060585767698638339725079916004815528421354856378029244940288L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP5 
[256L, 0, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[256L, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 32, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[32L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0089 
[137, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
137
['JUMPDEST ', 'DUP4 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH2 0x00a4 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[32L, 1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[0, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00a4 
[164, 1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
164
['JUMPDEST ', 'POP ', 'POP ', 'POP ', 'POP ', 'SWAP1 ', 'POP ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x1f ', 'AND ', 'DUP1 ', 'ISZERO ', 'PUSH2 0x00d1 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[160L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[256L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1, 256L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[257L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x1f 
[31, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00d1 
[209, 0, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
184
['DUP1 ', 'DUP3 ', 'SUB ', 'DUP1 ', 'MLOAD ', 'PUSH1 0x01 ', 'DUP4 ', 'PUSH1 0x20 ', 'SUB ', 'PUSH2 0x0100 ', 'EXP ', 'SUB ', 'NOT ', 'AND ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'SWAP2 ', 'POP ']
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[257L, 1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[256L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 1, 1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[31L, 1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0100 
[256, 31L, 1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EXP 
[452312848583266388373324160190187140051835877600158453279131187530910662656L, 1, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[452312848583266388373324160190187140051835877600158453279131187530910662655L, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion NOT 
[115339776388732929035197660848497720713218148788040405586178452820382218977280L, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[256L, 44326659161160106060585767698638339725079916004815528421354856378029244940288L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[288L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[257L, 1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
209
['JUMPDEST ', 'POP ', 'SWAP3 ', 'POP ', 'POP ', 'POP ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'SWAP2 ', 'SUB ', 'SWAP1 ', 'RETURN ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP3 
[128L, 192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[288L, 192L, 192L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[96L, 192L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[192L, 96L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion RETURN 
[Concat(0, Extract(255, 224, Id_1))]
88
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
65
['DUP1 ', 'PUSH4 0x942ae0a7 ', 'EQ ', 'PUSH2 0x00df ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP1 
[Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0x942ae0a7 
[2485837991, Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EQ 
[If(Extract(255, 224, Id_1) == 2485837991, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00df 
[223, If(Extract(255, 224, Id_1) == 2485837991, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
223
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH2 0x00ea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00ea 
[234, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
234
['JUMPDEST ', 'PUSH2 0x00f2 ', 'PUSH2 0x01b0 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x00f2 
[242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x01b0 
[432, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[242, Concat(0, Extract(255, 224, Id_1))]
432
['JUMPDEST ', 'PUSH2 0x01b8 ', 'PUSH2 0x01f3 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x01b8 
[440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x01f3 
[499, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[440, 242, Concat(0, Extract(255, 224, Id_1))]
499
['JUMPDEST ', 'PUSH1 0x20 ', 'PUSH1 0x40 ', 'MLOAD ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'PUSH1 0x40 ', 'MSTORE ', 'DUP1 ', 'PUSH1 0x00 ', 'DUP2 ', 'MSTORE ', 'POP ', 'SWAP1 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 32, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[96, 32, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[32, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 32, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 128L, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[96, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 96, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 0, 96, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, 96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[96, 440, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[440, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[96, 242, Concat(0, Extract(255, 224, Id_1))]
440
['JUMPDEST ', 'PUSH1 0x40 ', 'DUP1 ', 'MLOAD ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'PUSH1 0x40 ', 'MSTORE ', 'DUP1 ', 'PUSH1 0x01 ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'PUSH32 0x6800000000000000000000000000000000000000000000000000000000000000 ', 'DUP2 ', 'MSTORE ', 'POP ', 'SWAP1 ', 'POP ', 'SWAP1 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[64, 64, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[128L, 64, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[64, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 64, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[192L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 192L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[128L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 128L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 1, 128L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[128L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 128L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH32 0x6800000000000000000000000000000000000000000000000000000000000000 
[47040536252659704390825712659779462565390931270416479141029643503214708916224L, 160L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[160L, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 160L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[160L, 128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 96, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 128L, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 242, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[242, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[128L, Concat(0, Extract(255, 224, Id_1))]
242
['JUMPDEST ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x20 ', 'ADD ', 'DUP3 ', 'DUP2 ', 'SUB ', 'DUP3 ', 'MSTORE ', 'DUP4 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'MLOAD ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'DUP1 ', 'DUP4 ', 'DUP4 ', 'PUSH1 0x00 ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 192L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[192L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 192L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[32L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[192L, 32L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[128L, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[1, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[224L, 1, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 224L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[256L, 128L, 224L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[224L, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[128L, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[1, 128L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[128L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 128L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
279
['JUMPDEST ', 'DUP4 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH2 0x0132 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0132 
[306, 0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
288
['DUP1 ', 'DUP3 ', 'ADD ', 'MLOAD ', 'DUP2 ', 'DUP5 ', 'ADD ', 'MSTORE ', 'PUSH1 0x20 ', 'DUP2 ', 'ADD ', 'SWAP1 ', 'POP ', 'PUSH2 0x0117 ', 'JUMP ']
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[160L, 0, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[47040536252659704390825712659779462565390931270416479141029643503214708916224L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP5 
[256L, 0, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[256L, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 32, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[32L, 0, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0117 
[279, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
279
['JUMPDEST ', 'DUP4 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH2 0x0132 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[32L, 1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[0, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0132 
[306, 1, 32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
306
['JUMPDEST ', 'POP ', 'POP ', 'POP ', 'POP ', 'SWAP1 ', 'POP ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x1f ', 'AND ', 'DUP1 ', 'ISZERO ', 'PUSH2 0x015f ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[32L, 160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[160L, 256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[256L, 1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 160L, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[160L, 1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 256L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[256L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1, 256L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[257L, 1, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x1f 
[31, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x015f 
[351, 0, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
326
['DUP1 ', 'DUP3 ', 'SUB ', 'DUP1 ', 'MLOAD ', 'PUSH1 0x01 ', 'DUP4 ', 'PUSH1 0x20 ', 'SUB ', 'PUSH2 0x0100 ', 'EXP ', 'SUB ', 'NOT ', 'AND ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'SWAP2 ', 'POP ']
Stack despues de la ejecucion de la instruccion DUP1 
[1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[257L, 1, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[256L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[1, 1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 1, 1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[31L, 1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH2 0x0100 
[256, 31L, 1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EXP 
[452312848583266388373324160190187140051835877600158453279131187530910662656L, 1, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[452312848583266388373324160190187140051835877600158453279131187530910662655L, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion NOT 
[115339776388732929035197660848497720713218148788040405586178452820382218977280L, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[256L, 47040536252659704390825712659779462565390931270416479141029643503214708916224L, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 256L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[288L, 1, 257L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[257L, 1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
351
['JUMPDEST ', 'POP ', 'SWAP3 ', 'POP ', 'POP ', 'POP ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'SWAP2 ', 'SUB ', 'SWAP1 ', 'RETURN ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1, 288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[288L, 192L, 192L, 128L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP3 
[128L, 192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[192L, 192L, 288L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[288L, 192L, 192L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[96L, 192L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[192L, 96L, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion RETURN 
[Concat(0, Extract(255, 224, Id_1))]
230
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
76
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
================
start address: 0
end address: 12
end statement type: conditional
jump target: 76
falls to: 13
PUSH1 0x60 
PUSH1 0x40 
MSTORE 
PUSH1 0x04 
CALLDATASIZE 
LT 
PUSH2 0x004c 
JUMPI 
================
start address: 519
end address: 519
end statement type: terminal
jump target: 0
STOP 
================
start address: 137
end address: 145
end statement type: conditional
jump target: 164
falls to: 146
JUMPDEST 
DUP4 
DUP2 
LT 
ISZERO 
PUSH2 0x00a4 
JUMPI 
================
start address: 13
end address: 64
end statement type: conditional
jump target: 81
falls to: 65
PUSH1 0x00 
CALLDATALOAD 
PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
SWAP1 
DIV 
PUSH4 0xffffffff 
AND 
DUP1 
PUSH4 0x394a2493 
EQ 
PUSH2 0x0051 
JUMPI 
================
start address: 146
end address: 163
end statement type: unconditional
jump target: 137
DUP1 
DUP3 
ADD 
MLOAD 
DUP2 
DUP5 
ADD 
MSTORE 
PUSH1 0x20 
DUP2 
ADD 
SWAP1 
POP 
PUSH2 0x0089 
JUMP 
================
start address: 279
end address: 287
end statement type: conditional
jump target: 306
falls to: 288
JUMPDEST 
DUP4 
DUP2 
LT 
ISZERO 
PUSH2 0x0132 
JUMPI 
================
start address: 288
end address: 305
end statement type: unconditional
jump target: 279
DUP1 
DUP3 
ADD 
MLOAD 
DUP2 
DUP5 
ADD 
MSTORE 
PUSH1 0x20 
DUP2 
ADD 
SWAP1 
POP 
PUSH2 0x0117 
JUMP 
================
start address: 440
end address: 498
end statement type: unconditional
jump target: 242
JUMPDEST 
PUSH1 0x40 
DUP1 
MLOAD 
SWAP1 
DUP2 
ADD 
PUSH1 0x40 
MSTORE 
DUP1 
PUSH1 0x01 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
PUSH32 0x6800000000000000000000000000000000000000000000000000000000000000 
DUP2 
MSTORE 
POP 
SWAP1 
POP 
SWAP1 
JUMP 
================
start address: 164
end address: 183
end statement type: conditional
jump target: 209
falls to: 184
JUMPDEST 
POP 
POP 
POP 
POP 
SWAP1 
POP 
SWAP1 
DUP2 
ADD 
SWAP1 
PUSH1 0x1f 
AND 
DUP1 
ISZERO 
PUSH2 0x00d1 
JUMPI 
================
start address: 432
end address: 439
end statement type: unconditional
jump target: 499
JUMPDEST 
PUSH2 0x01b8 
PUSH2 0x01f3 
JUMP 
================
start address: 306
end address: 325
end statement type: conditional
jump target: 351
falls to: 326
JUMPDEST 
POP 
POP 
POP 
POP 
SWAP1 
POP 
SWAP1 
DUP2 
ADD 
SWAP1 
PUSH1 0x1f 
AND 
DUP1 
ISZERO 
PUSH2 0x015f 
JUMPI 
================
start address: 184
end address: 208
end statement type: falls_to
jump target: 0
falls to: 209
DUP1 
DUP3 
SUB 
DUP1 
MLOAD 
PUSH1 0x01 
DUP4 
PUSH1 0x20 
SUB 
PUSH2 0x0100 
EXP 
SUB 
NOT 
AND 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
SWAP2 
POP 
================
start address: 223
end address: 229
end statement type: conditional
jump target: 234
falls to: 230
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH2 0x00ea 
JUMPI 
================
start address: 65
end address: 75
end statement type: conditional
jump target: 223
falls to: 76
DUP1 
PUSH4 0x942ae0a7 
EQ 
PUSH2 0x00df 
JUMPI 
================
start address: 326
end address: 350
end statement type: falls_to
jump target: 0
falls to: 351
DUP1 
DUP3 
SUB 
DUP1 
MLOAD 
PUSH1 0x01 
DUP4 
PUSH1 0x20 
SUB 
PUSH2 0x0100 
EXP 
SUB 
NOT 
AND 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
SWAP2 
POP 
================
start address: 76
end address: 80
end statement type: terminal
jump target: 0
JUMPDEST 
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 209
end address: 222
end statement type: terminal
jump target: 0
JUMPDEST 
POP 
SWAP3 
POP 
POP 
POP 
PUSH1 0x40 
MLOAD 
DUP1 
SWAP2 
SUB 
SWAP1 
RETURN 
================
start address: 88
end address: 91
end statement type: terminal
jump target: 0
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 92
end address: 99
end statement type: unconditional
jump target: 365
JUMPDEST 
PUSH2 0x0064 
PUSH2 0x016d 
JUMP 
================
start address: 351
end address: 364
end statement type: terminal
jump target: 0
JUMPDEST 
POP 
SWAP3 
POP 
POP 
POP 
PUSH1 0x40 
MLOAD 
DUP1 
SWAP2 
SUB 
SWAP1 
RETURN 
================
start address: 100
end address: 135
end statement type: falls_to
jump target: 0
falls to: 137
JUMPDEST 
PUSH1 0x40 
MLOAD 
DUP1 
DUP1 
PUSH1 0x20 
ADD 
DUP3 
DUP2 
SUB 
DUP3 
MSTORE 
DUP4 
DUP2 
DUP2 
MLOAD 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
SWAP2 
POP 
DUP1 
MLOAD 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
DUP1 
DUP4 
DUP4 
PUSH1 0x00 
================
start address: 230
end address: 233
end statement type: terminal
jump target: 0
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 81
end address: 87
end statement type: conditional
jump target: 92
falls to: 88
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH2 0x005c 
JUMPI 
================
start address: 234
end address: 241
end statement type: unconditional
jump target: 432
JUMPDEST 
PUSH2 0x00f2 
PUSH2 0x01b0 
JUMP 
================
start address: 365
end address: 372
end statement type: unconditional
jump target: 499
JUMPDEST 
PUSH2 0x0175 
PUSH2 0x01f3 
JUMP 
================
start address: 242
end address: 277
end statement type: falls_to
jump target: 0
falls to: 279
JUMPDEST 
PUSH1 0x40 
MLOAD 
DUP1 
DUP1 
PUSH1 0x20 
ADD 
DUP3 
DUP2 
SUB 
DUP3 
MSTORE 
DUP4 
DUP2 
DUP2 
MLOAD 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
SWAP2 
POP 
DUP1 
MLOAD 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
DUP1 
DUP4 
DUP4 
PUSH1 0x00 
================
start address: 499
end address: 518
end statement type: unconditional
jump target: 440
JUMPDEST 
PUSH1 0x20 
PUSH1 0x40 
MLOAD 
SWAP1 
DUP2 
ADD 
PUSH1 0x40 
MSTORE 
DUP1 
PUSH1 0x00 
DUP2 
MSTORE 
POP 
SWAP1 
JUMP 
================
start address: 373
end address: 431
end statement type: unconditional
jump target: 100
JUMPDEST 
PUSH1 0x40 
DUP1 
MLOAD 
SWAP1 
DUP2 
ADD 
PUSH1 0x40 
MSTORE 
DUP1 
PUSH1 0x01 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
PUSH32 0x6200000000000000000000000000000000000000000000000000000000000000 
DUP2 
MSTORE 
POP 
SWAP1 
POP 
SWAP1 
JUMP 
