0
['PUSH1 0x60 ', 'PUSH1 0x40 ', 'MSTORE ', 'PUSH1 0x04 ', 'CALLDATASIZE ', 'LT ', 'PUSH1 0x3f ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x60 
[96]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 96]
Stack despues de la ejecucion de la instruccion MSTORE 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x04 
[4]
Stack despues de la ejecucion de la instruccion CALLDATASIZE 
[Id_size, 4]
Stack despues de la ejecucion de la instruccion LT 
[If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion PUSH1 0x3f 
[63, If(ULE(4, Id_size), 0, 1)]
Stack despues de la ejecucion de la instruccion JUMPI 
[]
63
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0]
Stack despues de la ejecucion de la instruccion REVERT 
[]
12
['PUSH1 0x00 ', 'CALLDATALOAD ', 'PUSH29 0x0100000000000000000000000000000000000000000000000000000000 ', 'SWAP1 ', 'DIV ', 'PUSH4 0xffffffff ', 'AND ', 'DUP1 ', 'PUSH4 0x5757d9cd ', 'EQ ', 'PUSH1 0x44 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[Id_1]
Stack despues de la ejecucion de la instruccion PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
[26959946667150639794667015087019630673637144422540572481103610249216L, Id_1]
Stack despues de la ejecucion de la instruccion SWAP1 
[Id_1, 26959946667150639794667015087019630673637144422540572481103610249216L]
Stack despues de la ejecucion de la instruccion DIV 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0xffffffff 
[4294967295, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion AND 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH4 0x5757d9cd 
[1465375181, Concat(0, Extract(255, 224, Id_1)), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion EQ 
[If(Extract(255, 224, Id_1) == 1465375181, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x44 
[68, If(Extract(255, 224, Id_1) == 1465375181, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
68
['JUMPDEST ', 'CALLVALUE ', 'ISZERO ', 'PUSH1 0x4e ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLVALUE 
[Iv, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x4e 
[78, If(Iv == 0, 1, 0), Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[Concat(0, Extract(255, 224, Id_1))]
78
['JUMPDEST ', 'PUSH1 0x99 ', 'PUSH1 0x04 ', 'DUP1 ', 'DUP1 ', 'CALLDATALOAD ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'DUP3 ', 'ADD ', 'DUP1 ', 'CALLDATALOAD ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x20 ', 'MUL ', 'PUSH1 0x20 ', 'ADD ', 'PUSH1 0x40 ', 'MLOAD ', 'SWAP1 ', 'DUP2 ', 'ADD ', 'PUSH1 0x40 ', 'MSTORE ', 'DUP1 ', 'SWAP4 ', 'SWAP3 ', 'SWAP2 ', 'SWAP1 ', 'DUP2 ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'DUP4 ', 'DUP4 ', 'PUSH1 0x20 ', 'MUL ', 'DUP1 ', 'DUP3 ', 'DUP5 ', 'CALLDATACOPY ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'POP ', 'POP ', 'POP ', 'POP ', 'SWAP2 ', 'SWAP1 ', 'POP ', 'POP ', 'PUSH1 0xaf ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x99 
[153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x04 
[4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4, 4, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[nums, 4, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[4, nums, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 4, nums, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[36L, nums, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[4, nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[4 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4 + nums, 4 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLDATALOAD 
[Id_2, 4 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[4 + nums, Id_2, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 4 + nums, Id_2, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[36 + nums, Id_2, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[32*Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 32*Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[32 + 32*Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 32 + 32*Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[96, 32 + 32*Id_2, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[32 + 32*Id_2, 96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 32 + 32*Id_2, 96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128 + 32*Id_2, 96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 128 + 32*Id_2, 96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[96, 96, Id_2, Id_2, 36 + nums, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP4 
[36 + nums, 96, Id_2, Id_2, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP3 
[Id_2, 96, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[Id_2, 96, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[Id_2, 96, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, Id_2, 96, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[96, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP4 
[Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[32*Id_2, 32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[36 + nums, 32*Id_2, 32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP5 
[128L, 36 + nums, 32*Id_2, 32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion CALLDATACOPY 
[32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[128L, 32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128 + 32*Id_2, 36 + nums, 128L, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[128L, 36 + nums, 128 + 32*Id_2, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[36 + nums, 128 + 32*Id_2, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[128 + 32*Id_2, Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[Id_2, Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[Id_2, 36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[36 + nums, 96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[96, 36L, 4, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[4, 36L, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[36L, 4, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xaf 
[175, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[96, 153, Concat(0, Extract(255, 224, Id_1))]
175
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'PUSH1 0x00 ', 'SWAP2 ', 'POP ', 'PUSH1 0x00 ', 'SWAP1 ', 'POP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 5, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
196
['DUP3 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'LT ', 'ISZERO ', 'ISZERO ', 'PUSH1 0xd0 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP3 
[96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[Id_2, 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[0, Id_2, 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[If(Id_2 == 0, 0, 1), 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Id_2 == 0, 1, 0), 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Id_2 == 0, 0, 1), 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xd0 
[208, If(Id_2 == 0, 0, 1), 0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
208
['JUMPDEST ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x20 ', 'MUL ', 'ADD ', 'MLOAD ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xbb ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, 0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 0, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[0, 128L, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 0, 128L, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[0L, 128L, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_128, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[0, mem_128, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[mem_128, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[0, 0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, 0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 0, 0, 0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[1L, 0, 0, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[0, 0, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[0, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xbb 
[187, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1L, 5, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 0, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
196
['DUP3 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'LT ', 'ISZERO ', 'ISZERO ', 'PUSH1 0xd0 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP3 
[96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_96, 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[1L, mem_96, 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[If(Extract(255, 1, mem_96) == 0, 0, 1), 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Extract(255, 1, mem_96) == 0, 1, 0), 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Extract(255, 1, mem_96) == 0, 0, 1), 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xd0 
[208, If(Extract(255, 1, mem_96) == 0, 0, 1), 1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
208
['JUMPDEST ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x20 ', 'MUL ', 'ADD ', 'MLOAD ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xbb ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 1L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, 1L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 1L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[1L, 128L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 1L, 128L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[32L, 128L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[160L, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_160, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[mem_128, mem_160, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[mem_128 + mem_160, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[mem_128, 1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[1L, 1L, 1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 1L, 1L, 1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[2L, 1L, 1L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[1L, 1L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[1L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xbb 
[187, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[2L, 5, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 0, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
196
['DUP3 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'LT ', 'ISZERO ', 'ISZERO ', 'PUSH1 0xd0 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP3 
[96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_96, 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[2L, mem_96, 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[If(And(Extract(255, 2, mem_96) == 0,
       ULE(Extract(1, 0, mem_96), 2)),
   0,
   1), 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(And(Extract(255, 2, mem_96) == 0,
       ULE(Extract(1, 0, mem_96), 2)),
   1,
   0), 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(And(Extract(255, 2, mem_96) == 0,
       ULE(Extract(1, 0, mem_96), 2)),
   0,
   1), 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xd0 
[208, If(And(Extract(255, 2, mem_96) == 0,
       ULE(Extract(1, 0, mem_96), 2)),
   0,
   1), 2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
208
['JUMPDEST ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x20 ', 'MUL ', 'ADD ', 'MLOAD ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xbb ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 2L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, 2L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 2L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[2L, 128L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 2L, 128L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[64L, 128L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[192L, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_192, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[mem_128 + mem_160, mem_192, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[mem_128 + mem_160 + mem_192, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[mem_128 + mem_160, 2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[2L, 2L, 2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 2L, 2L, 2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[3L, 2L, 2L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[2L, 2L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[2L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xbb 
[187, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3L, 5, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 0, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
196
['DUP3 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'LT ', 'ISZERO ', 'ISZERO ', 'PUSH1 0xd0 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP3 
[96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_96, 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[3L, mem_96, 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[If(Extract(255, 2, mem_96) == 0, 0, 1), 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Extract(255, 2, mem_96) == 0, 1, 0), 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(Extract(255, 2, mem_96) == 0, 0, 1), 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xd0 
[208, If(Extract(255, 2, mem_96) == 0, 0, 1), 3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
208
['JUMPDEST ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x20 ', 'MUL ', 'ADD ', 'MLOAD ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xbb ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 3L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, 3L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 3L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[3L, 128L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 3L, 128L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[96L, 128L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[224L, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_224, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[mem_128 + mem_160 + mem_192, mem_224, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[mem_128 + mem_160 + mem_192 + mem_224, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[mem_128 + mem_160 + mem_192, 3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[3L, 3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[3L, 3L, 3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 3L, 3L, 3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[4L, 3L, 3L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[3L, 3L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[3L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xbb 
[187, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[4L, 5, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[1, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[0, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 0, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
196
['DUP3 ', 'DUP2 ', 'DUP2 ', 'MLOAD ', 'DUP2 ', 'LT ', 'ISZERO ', 'ISZERO ', 'PUSH1 0xd0 ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion DUP3 
[96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[96, 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_96, 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[4L, mem_96, 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[If(And(Extract(255, 3, mem_96) == 0,
       ULE(Extract(2, 0, mem_96), 4)),
   0,
   1), 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(And(Extract(255, 3, mem_96) == 0,
       ULE(Extract(2, 0, mem_96), 4)),
   1,
   0), 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[If(And(Extract(255, 3, mem_96) == 0,
       ULE(Extract(2, 0, mem_96), 4)),
   0,
   1), 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xd0 
[208, If(And(Extract(255, 3, mem_96) == 0,
       ULE(Extract(2, 0, mem_96), 4)),
   0,
   1), 4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
208
['JUMPDEST ', 'SWAP1 ', 'PUSH1 0x20 ', 'ADD ', 'SWAP1 ', 'PUSH1 0x20 ', 'MUL ', 'ADD ', 'MLOAD ', 'DUP3 ', 'ADD ', 'SWAP2 ', 'POP ', 'DUP1 ', 'DUP1 ', 'PUSH1 0x01 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0xbb ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 96, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[128L, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[4L, 128L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, 4L, 128L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MUL 
[128L, 128L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[256L, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_256, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[mem_128 + mem_160 + mem_192 + mem_224, mem_256, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[mem_128 + mem_160 + mem_192 + mem_224, 4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4L, 4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[4L, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x01 
[1, 4L, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[5L, 4L, 4L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[4L, 4L, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[4L, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xbb 
[187, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
187
['JUMPDEST ', 'PUSH1 0x05 ', 'DUP2 ', 'LT ', 'ISZERO ', 'PUSH1 0xea ', 'JUMPI ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x05 
[5, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[5L, 5, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion LT 
[0, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ISZERO 
[1, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0xea 
[234, 1, 5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMPI 
[5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
234
['JUMPDEST ', 'POP ', 'SWAP2 ', 'SWAP1 ', 'POP ', 'JUMP ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[5L, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, 96, 153, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[153, 96, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[96, 153, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[153, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion JUMP 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
153
['JUMPDEST ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'DUP3 ', 'DUP2 ', 'MSTORE ', 'PUSH1 0x20 ', 'ADD ', 'SWAP2 ', 'POP ', 'POP ', 'PUSH1 0x40 ', 'MLOAD ', 'DUP1 ', 'SWAP2 ', 'SUB ', 'SWAP1 ', 'RETURN ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP3 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP2 
[mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MSTORE 
[mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x20 
[32, mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion ADD 
[32 + mem_64, mem_64, mem_128 + mem_160 + mem_192 + mem_224 + mem_256, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[mem_128 + mem_160 + mem_192 + mem_224 + mem_256, mem_64, 32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[mem_64, 32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion POP 
[32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x40 
[64, 32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion MLOAD 
[mem_64, 32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[mem_64, mem_64, 32 + mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP2 
[32 + mem_64, mem_64, mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SUB 
[32, mem_64, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion SWAP1 
[mem_64, 32, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion RETURN 
[Concat(0, Extract(255, 224, Id_1))]
207
['ASSERTFAIL ']
Stack despues de la ejecucion de la instruccion ASSERTFAIL 
[4L, 96, 4L, mem_128 + mem_160 + mem_192 + mem_224, 96, 153, Concat(0, Extract(255, 224, Id_1))]
207
['ASSERTFAIL ']
Stack despues de la ejecucion de la instruccion ASSERTFAIL 
[3L, 96, 3L, mem_128 + mem_160 + mem_192, 96, 153, Concat(0, Extract(255, 224, Id_1))]
207
['ASSERTFAIL ']
Stack despues de la ejecucion de la instruccion ASSERTFAIL 
[2L, 96, 2L, mem_128 + mem_160, 96, 153, Concat(0, Extract(255, 224, Id_1))]
207
['ASSERTFAIL ']
Stack despues de la ejecucion de la instruccion ASSERTFAIL 
[1L, 96, 1L, mem_128, 96, 153, Concat(0, Extract(255, 224, Id_1))]
207
['ASSERTFAIL ']
Stack despues de la ejecucion de la instruccion ASSERTFAIL 
[0, 96, 0, 0, 96, 153, Concat(0, Extract(255, 224, Id_1))]
74
['PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
63
['JUMPDEST ', 'PUSH1 0x00 ', 'DUP1 ', 'REVERT ']
Stack despues de la ejecucion de la instruccion JUMPDEST 
[Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion PUSH1 0x00 
[0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion DUP1 
[0, 0, Concat(0, Extract(255, 224, Id_1))]
Stack despues de la ejecucion de la instruccion REVERT 
[Concat(0, Extract(255, 224, Id_1))]
================
start address: 0
end address: 11
end statement type: conditional
jump target: 63
falls to: 12
PUSH1 0x60 
PUSH1 0x40 
MSTORE 
PUSH1 0x04 
CALLDATASIZE 
LT 
PUSH1 0x3f 
JUMPI 
================
start address: 208
end address: 233
end statement type: unconditional
jump target: 187
JUMPDEST 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
PUSH1 0x20 
MUL 
ADD 
MLOAD 
DUP3 
ADD 
SWAP2 
POP 
DUP1 
DUP1 
PUSH1 0x01 
ADD 
SWAP2 
POP 
POP 
PUSH1 0xbb 
JUMP 
================
start address: 187
end address: 195
end statement type: conditional
jump target: 234
falls to: 196
JUMPDEST 
PUSH1 0x05 
DUP2 
LT 
ISZERO 
PUSH1 0xea 
JUMPI 
================
start address: 68
end address: 73
end statement type: conditional
jump target: 78
falls to: 74
JUMPDEST 
CALLVALUE 
ISZERO 
PUSH1 0x4e 
JUMPI 
================
start address: 74
end address: 77
end statement type: terminal
jump target: 0
PUSH1 0x00 
DUP1 
REVERT 
================
start address: 12
end address: 62
end statement type: conditional
jump target: 68
falls to: 63
PUSH1 0x00 
CALLDATALOAD 
PUSH29 0x0100000000000000000000000000000000000000000000000000000000 
SWAP1 
DIV 
PUSH4 0xffffffff 
AND 
DUP1 
PUSH4 0x5757d9cd 
EQ 
PUSH1 0x44 
JUMPI 
================
start address: 78
end address: 152
end statement type: unconditional
jump target: 175
JUMPDEST 
PUSH1 0x99 
PUSH1 0x04 
DUP1 
DUP1 
CALLDATALOAD 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
DUP3 
ADD 
DUP1 
CALLDATALOAD 
SWAP1 
PUSH1 0x20 
ADD 
SWAP1 
DUP1 
DUP1 
PUSH1 0x20 
MUL 
PUSH1 0x20 
ADD 
PUSH1 0x40 
MLOAD 
SWAP1 
DUP2 
ADD 
PUSH1 0x40 
MSTORE 
DUP1 
SWAP4 
SWAP3 
SWAP2 
SWAP1 
DUP2 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
DUP4 
DUP4 
PUSH1 0x20 
MUL 
DUP1 
DUP3 
DUP5 
CALLDATACOPY 
DUP3 
ADD 
SWAP2 
POP 
POP 
POP 
POP 
POP 
POP 
SWAP2 
SWAP1 
POP 
POP 
PUSH1 0xaf 
JUMP 
================
start address: 207
end address: 207
end statement type: terminal
jump target: 0
ASSERTFAIL 
================
start address: 240
end address: 240
end statement type: terminal
jump target: 0
STOP 
================
start address: 153
end address: 174
end statement type: terminal
jump target: 0
JUMPDEST 
PUSH1 0x40 
MLOAD 
DUP1 
DUP3 
DUP2 
MSTORE 
PUSH1 0x20 
ADD 
SWAP2 
POP 
POP 
PUSH1 0x40 
MLOAD 
DUP1 
SWAP2 
SUB 
SWAP1 
RETURN 
================
start address: 196
end address: 206
end statement type: conditional
jump target: 208
falls to: 207
DUP3 
DUP2 
DUP2 
MLOAD 
DUP2 
LT 
ISZERO 
ISZERO 
PUSH1 0xd0 
JUMPI 
================
start address: 175
end address: 186
end statement type: falls_to
jump target: 0
falls to: 187
JUMPDEST 
PUSH1 0x00 
DUP1 
PUSH1 0x00 
SWAP2 
POP 
PUSH1 0x00 
SWAP1 
POP 
================
start address: 234
end address: 239
end statement type: unconditional
jump target: 153
JUMPDEST 
POP 
SWAP2 
SWAP1 
POP 
JUMP 
================
start address: 63
end address: 67
end statement type: terminal
jump target: 0
JUMPDEST 
PUSH1 0x00 
DUP1 
REVERT 
